name: Check Version and Update
on:
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨1点
    - cron: '0 13 * * *' # 每天下午1点
  workflow_dispatch:     # 手动触发
  push:
    branches: [ main, master ]
    paths:
      - 'bucket/*.json'

jobs:
  check-version:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup PowerShell
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          
      - name: Install Scoop
        shell: pwsh
        run: |
          iwr -useb get.scoop.sh | iex
          scoop install git
          
      - name: Clone Scoop repository for scripts
        shell: pwsh
        run: |
          git clone https://github.com/ScoopInstaller/Scoop.git $env:TEMP\scoop-core
          
      - name: Check and Update Versions
        shell: pwsh
        run: |
          $checkver = "$env:TEMP\scoop-core\bin\checkver.ps1"
          $bucket = "${{ github.workspace }}\bucket"
          
          $manifests = Get-ChildItem "$bucket\*.json" | Select-Object -ExpandProperty BaseName
          
          Write-Host "Found manifests: $($manifests -join ', ')"
          
          $updatedApps = @()
          $failedApps = @()
          
          foreach ($app in $manifests) {
            Write-Host "Checking $app for updates..." -ForegroundColor Green
            
            try {
              $beforeContent = Get-Content "$bucket\$app.json" -Raw
              & $checkver -App $app -Dir $bucket -Update
              $afterContent = Get-Content "$bucket\$app.json" -Raw
              
              if ($beforeContent -ne $afterContent) {
                $updatedApps += $app
                Write-Host "✓ $app updated successfully" -ForegroundColor Green
              } else {
                Write-Host "- $app is up to date" -ForegroundColor Yellow
              }
            } catch {
              $failedApps += $app
              Write-Host "✗ Error checking $app`: $_" -ForegroundColor Red
            }
          }
          
          # 保存更新状态到环境变量
          if ($updatedApps) {
            echo "UPDATED_APPS=$($updatedApps -join ',')" >> $env:GITHUB_ENV
          }
          if ($failedApps) {
            echo "FAILED_APPS=$($failedApps -join ',')" >> $env:GITHUB_ENV
          }
          
      - name: Commit and Push
        shell: pwsh
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          $changes = git status --porcelain
          if ($changes) {
            Write-Host "Changes detected, committing..."
            git add bucket/*.json
            
            $date = Get-Date -Format "yyyy-MM-dd HH:mm"
            $commitMessage = "Auto-update: $date"
            
            if ($env:UPDATED_APPS) {
              $commitMessage += "`nUpdated: $env:UPDATED_APPS"
            }
            if ($env:FAILED_APPS) {
              $commitMessage += "`nFailed: $env:FAILED_APPS"
            }
            
            git commit -m $commitMessage
            git push
          } else {
            Write-Host "No changes detected"
          }
          
      - name: Create Summary
        shell: pwsh
        run: |
          $summary = @"
          ## Auto-Update Summary
          
          **Date:** $(Get-Date -Format "yyyy-MM-dd HH:mm")
          
          "@
          
          if ($env:UPDATED_APPS) {
            $summary += "`n**✅ Updated Apps:**`n"
            foreach ($app in $env:UPDATED_APPS.Split(',')) {
              $summary += "- $app`n"
            }
          } else {
            $summary += "`n**✅ No updates available**`n"
          }
          
          if ($env:FAILED_APPS) {
            $summary += "`n**❌ Failed Apps:**`n"
            foreach ($app in $env:FAILED_APPS.Split(',')) {
              $summary += "- $app`n"
            }
          }
          
          echo "$summary" >> $env:GITHUB_STEP_SUMMARY